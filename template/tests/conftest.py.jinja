"""Pytest configuration and shared fixtures."""

import pytest
import tempfile
import json
from pathlib import Path
from typing import Dict, Any, List
from unittest.mock import Mock, patch

from {{ project_name }}.hello_world import HelloWorldGenerator, GreetingStyle, GreetingStats
from {{ project_name }}.utils import ColorUtils


@pytest.fixture
def hello_generator():
    """Fixture providing a HelloWorldGenerator instance."""
    return HelloWorldGenerator()


@pytest.fixture
def greeting_stats():
    """Fixture providing a GreetingStats instance."""
    return GreetingStats()


@pytest.fixture(params=list(GreetingStyle))
def greeting_style(request):
    """Parametrized fixture for all greeting styles."""
    return request.param


@pytest.fixture(params=["World", "Alice", "Bob", "Developer", "Python", "Test User"])
def sample_name(request):
    """Parametrized fixture for sample names."""
    return request.param


@pytest.fixture
def sample_names():
    """Fixture providing a list of sample names."""
    return ["World", "Alice", "Bob", "Developer", "Python", "Test User", "ðŸŒŸ Star"]


@pytest.fixture
def sample_styles():
    """Fixture providing a list of all greeting styles."""
    return list(GreetingStyle)


@pytest.fixture
def mock_console():
    """Fixture providing a mocked Rich console."""
    with patch('rich.console.Console') as mock:
        yield mock


@pytest.fixture
def temp_config_dir():
    """Fixture providing a temporary configuration directory."""
    with tempfile.TemporaryDirectory() as temp_dir:
        yield Path(temp_dir)


@pytest.fixture
def sample_config():
    """Fixture providing sample configuration data."""
    return {
        "default_style": "fancy",
        "default_name": "Tester",
        "animation_enabled": False,
        "colors": ["red", "blue", "green"]
    }


@pytest.fixture
def config_file(temp_config_dir, sample_config):
    """Fixture providing a temporary config file."""
    config_path = temp_config_dir / "config.json"
    with open(config_path, 'w') as f:
        json.dump(sample_config, f)
    return config_path


@pytest.fixture
def color_utils():
    """Fixture providing ColorUtils class."""
    return ColorUtils


@pytest.fixture(scope="session")
def expected_greeting_patterns():
    """Session fixture with expected patterns in greetings."""
    return {
        GreetingStyle.SIMPLE: ["Hello,", "ðŸ‘‹"],
        GreetingStyle.FANCY: ["âœ¨", "Hello", "ðŸŽ‰"],
        GreetingStyle.RAINBOW: ["Hello,", "ðŸŒˆ"],
        GreetingStyle.BOX: ["Hello,", "ðŸŽŠ"]
    }


@pytest.fixture
def invalid_names():
    """Fixture providing invalid names for testing."""
    return [
        "",  # Empty string
        " ",  # Just whitespace
        None,  # None value
        123,  # Non-string
        "x" * 100,  # Too long
        "test@#$%",  # Invalid characters
    ]


@pytest.fixture
def valid_names():
    """Fixture providing valid names for testing."""
    return [
        "World",
        "Alice",
        "Bob_Smith",
        "Test-User",
        "a",  # Single character
        "Multi Word Name",
        "Name123",
    ]


@pytest.fixture(autouse=True)
def reset_stats(greeting_stats):
    """Auto-use fixture that resets stats before each test."""
    yield
    greeting_stats.reset_stats()


@pytest.fixture
def mock_random():
    """Fixture providing predictable random values."""
    with patch('random.choice') as mock_choice, \
         patch('random.sample') as mock_sample:
        mock_choice.return_value = "blue"
        mock_sample.return_value = ["red", "green", "blue"]
        yield {"choice": mock_choice, "sample": mock_sample}


@pytest.fixture
def cli_runner():
    """Fixture providing a Click CLI runner."""
    from click.testing import CliRunner
    return CliRunner()


@pytest.fixture(scope="function")
def captured_output():
    """Fixture for capturing console output."""
    from io import StringIO
    import sys
    
    old_stdout = sys.stdout
    old_stderr = sys.stderr
    
    stdout_capture = StringIO()
    stderr_capture = StringIO()
    
    sys.stdout = stdout_capture
    sys.stderr = stderr_capture
    
    yield {
        "stdout": stdout_capture,
        "stderr": stderr_capture
    }
    
    sys.stdout = old_stdout
    sys.stderr = old_stderr


# Markers for test organization
def pytest_configure(config):
    """Configure custom markers."""
    config.addinivalue_line("markers", "unit: Unit tests")
    config.addinivalue_line("markers", "integration: Integration tests") 
    config.addinivalue_line("markers", "slow: Slow running tests")
    config.addinivalue_line("markers", "smoke: Smoke tests")
    config.addinivalue_line("markers", "cli: CLI tests")
    config.addinivalue_line("markers", "utils: Utility function tests")
    config.addinivalue_line("markers", "greeting: Greeting generation tests")
    config.addinivalue_line("markers", "stats: Statistics tests")
    config.addinivalue_line("markers", "config: Configuration tests")


# Custom pytest collection hooks
def pytest_collection_modifyitems(config, items):
    """Automatically mark tests based on their location and content."""
    for item in items:
        # Mark CLI tests
        if "test_cli" in item.nodeid:
            item.add_marker(pytest.mark.cli)
        
        # Mark utility tests
        if "test_utils" in item.nodeid:
            item.add_marker(pytest.mark.utils)
        
        # Mark greeting tests
        if "test_hello_world" in item.nodeid or "greeting" in item.name.lower():
            item.add_marker(pytest.mark.greeting)
        
        # Mark stats tests
        if "stats" in item.name.lower():
            item.add_marker(pytest.mark.stats)
        
        # Mark config tests
        if "config" in item.name.lower():
            item.add_marker(pytest.mark.config)
        
        # Mark slow tests (those with sleep or heavy operations)
        if "slow" in item.name.lower() or "performance" in item.name.lower():
            item.add_marker(pytest.mark.slow)


# Fixtures for performance testing
@pytest.fixture
def performance_timer():
    """Fixture for timing test execution."""
    import time
    
    class Timer:
        def __init__(self):
            self.start_time = None
            self.end_time = None
        
        def start(self):
            self.start_time = time.time()
        
        def stop(self):
            self.end_time = time.time()
        
        @property
        def elapsed(self):
            if self.start_time and self.end_time:
                return self.end_time - self.start_time
            return None
    
    return Timer()
