# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
#           🐳 OPTIMIZED PYTHON DEV CONTAINER
#                  Multi-Stage Build
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# --------------------------------------------------------------
# 🏗️ Stage 1: Base System Setup
# --------------------------------------------------------------
FROM python:3.12.11-slim AS base

# Build arguments
ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=${USER_UID}
ARG DEBIAN_FRONTEND=noninteractive

# Core environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    UV_CACHE_DIR=/tmp/uv-cache \
    UV_PYTHON_PREFERENCE=only-system

# Create non-root user early
RUN groupadd --gid "${USER_GID}" "${USERNAME}" \
    && useradd --uid "${USER_UID}" --gid "${USER_GID}" -m "${USERNAME}" \
    && mkdir -p /home/${USERNAME}/.vscode-server /home/${USERNAME}/.vscode-server-insiders \
    && chown ${USER_UID}:${USER_GID} /home/${USERNAME}/.vscode-server*

# Install essential system packages with cache mount
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    # Core system tools
    curl \
    wget \
    git \
    ca-certificates \
    gnupg \
    sudo \
    # Build essentials (needed for some Python packages)
    build-essential \
    # Shell and terminal
    bash \
    zsh \
    # Clean up happens automatically due to cache mount
    && rm -rf /var/lib/apt/lists/*

# Install uv (Python package manager) - single download
RUN --mount=type=cache,target=/tmp/uv-install \
    curl -LsSf https://astral.sh/uv/install.sh | sh \
    && cp /root/.local/bin/uv /usr/local/bin/uv \
    && chmod 755 /usr/local/bin/uv

# --------------------------------------------------------------
# 🛠️ Stage 2: Development Tools
# --------------------------------------------------------------
FROM base AS dev-tools

# Install modern CLI tools in parallel batches
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    # File and text processing tools
    ripgrep \
    fzf \
    unzip \
    fontconfig \
    # Network tools
    iputils-ping \
    && rm -rf /var/lib/apt/lists/*

# Install eza (modern ls replacement) - separate for better caching
RUN --mount=type=cache,target=/tmp/eza-cache \
    mkdir -p /etc/apt/keyrings \
    && wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | gpg --dearmor -o /etc/apt/keyrings/gierens.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | tee /etc/apt/sources.list.d/gierens.list \
    && chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list \
    && apt-get update \
    && apt-get install -y eza

# Create symbolic links for better tool names
RUN ln -sf /usr/bin/fdfind /usr/local/bin/fd 2>/dev/null || true

# Install Starship (fast prompt) - remote fetch optimization
RUN --mount=type=cache,target=/tmp/starship-cache \
    curl -sS https://starship.rs/install.sh | sh -s -- --yes

# --------------------------------------------------------------
# 🎨 Stage 3: Fonts (Optional Heavy Assets)
# --------------------------------------------------------------
FROM dev-tools AS fonts

# Install Nerd Fonts using remote fetch (Docker Build Cloud optimization)
RUN --mount=type=cache,target=/tmp/fonts-cache \
    mkdir -p /usr/share/fonts/truetype/nerd-fonts \
    && cd /tmp/fonts-cache \
    && curl -fLo FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip \
    && curl -fLo JetBrainsMono.zip https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip \
    && unzip -o -j FiraCode.zip "*.ttf" -d /usr/share/fonts/truetype/nerd-fonts/ \
    && unzip -o -j JetBrainsMono.zip "*.ttf" -d /usr/share/fonts/truetype/nerd-fonts/ \
    && fc-cache -fv

# --------------------------------------------------------------
# 🐍 Stage 4: Python Environment (Cached)
# --------------------------------------------------------------
FROM fonts AS python-deps

# Switch to non-root user for Python setup
USER ${USERNAME}
WORKDIR /home/${USERNAME}/workspace/{{ project_name }}

# Pre-create common directories
RUN mkdir -p \
    /home/${USERNAME}/.cache \
    /home/${USERNAME}/.local \
    /home/${USERNAME}/.config

# --------------------------------------------------------------
# 🚀 Stage 5: Final Development Image
# --------------------------------------------------------------
FROM python-deps AS dev

# Add zsh_aliases in .zshrc
RUN echo "source /home/${USERNAME}/.zsh_aliases" >> /home/${USERNAME}/.zshrc

# Install bat with symlink fix (Debian naming issue)
USER root
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends bat \
    && ln -sf /usr/bin/batcat /usr/local/bin/bat \
    && rm -rf /var/lib/apt/lists/*

# Install zoxide (smart cd)
RUN --mount=type=cache,target=/tmp/zoxide-cache \
    curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash \
    && mv /root/.local/bin/zoxide /usr/local/bin/

# Switch back to development user
USER ${USERNAME}

# Set final working directory
WORKDIR /home/${USERNAME}/workspace/{{ project_name }}

# Health check for development environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD uv --version && python --version || exit 1

# Keep container running for development
CMD ["/bin/sh", "-c", "while sleep 1000; do :; done"]
