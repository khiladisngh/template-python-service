# {{ project_name }}

{{ project_description }}

[![CI](https://github.com/{{ author_name.lower().replace(' ', '') }}/{{ project_name }}/workflows/CI/badge.svg)](https://github.com/{{ author_name.lower().replace(' ', '') }}/{{ project_name }}/actions)
[![codecov](https://codecov.io/gh/{{ author_name.lower().replace(' ', '') }}/{{ project_name }}/branch/main/graph/badge.svg)](https://codecov.io/gh/{{ author_name.lower().replace(' ', '') }}/{{ project_name }})
[![Python {{ python_version }}+](https://img.shields.io/badge/python-{{ python_version }}+-blue.svg)](https://www.python.org/downloads/)
[![License: {{ license }}](https://img.shields.io/badge/License-{{ license }}-yellow.svg)](https://opensource.org/licenses/{{ license }})

## ✨ Features

- 🖥️ Modern CLI interface with rich formatting
- 🧪 Comprehensive testing with pytest
- 🔍 Type checking with mypy
- 🎨 Code formatting with ruff
- 🔒 Security scanning with bandit
- 📦 Dependency management with uv
- 🪝 Pre-commit hooks for code quality
- 🐳 Docker support with multi-stage builds
- 🚀 CI/CD with GitHub Actions

## 🚀 Quick Start

### Prerequisites

- Python {{ python_version }}+
- [uv](https://docs.astral.sh/uv/) for dependency management

### Installation

#### From Source

```bash
git clone https://github.com/{{ author_name.lower().replace(' ', '') }}/{{ project_name }}.git
cd {{ project_name }}
uv sync --dev
```

#### Using uv

```bash
uv add {{ project_name }}
```

#### Using pip

```bash
pip install {{ project_name }}
```

### Usage

```bash
# Show help
{{ cli_name }} --help

# Basic usage
{{ cli_name }} hello --name "World"

# With verbose output
{{ cli_name }} -v hello --name "Alice" --count 3

# Show version
{{ cli_name }} version
```

## 🛠️ Development

### Development Setup

1. **Clone the repository:**
   ```bash
   git clone https://github.com/{{ author_name.lower().replace(' ', '') }}/{{ project_name }}.git
   cd {{ project_name }}
   ```

2. **Install dependencies:**
   ```bash
   uv sync --dev
   ```

3. **Install pre-commit hooks:**
   ```bash
   uv run pre-commit install
   ```

4. **Run the application:**
   ```bash
   uv run {{ cli_name }} --help
   ```

### Development Commands

| Command | Description |
|---------|-------------|
| `make install` | Install dependencies |
| `make test` | Run tests |
| `make test-fast` | Run tests (skip slow tests) |
| `make test-quick` | Run quick tests (smoke + unit) |
| `make test-unit` | Run unit tests only |
| `make test-integration` | Run integration tests only |
| `make test-smoke` | Run smoke tests only |
| `make test-cli` | Run CLI tests only |
| `make test-verbose` | Run tests with verbose output |
| `make test-no-cov` | Run tests without coverage |
| `make lint` | Run linting and formatting |
| `make format` | Format code |
| `make type-check` | Run type checking |
| `make security` | Run security checks |
| `make clean` | Clean build artifacts |
| `make build` | Build distribution |

### Running Tests

```bash
# Run all tests
./test.sh

# Run tests with coverage
./test.sh --coverage

# Run only fast tests
./test.sh --fast

# Run specific test markers
uv run pytest -m "not slow"
uv run pytest -m integration
```

## 🧪 Testing

This project includes a comprehensive testing suite with different types of tests and extensive pytest configuration.

### Test Structure

```
tests/
├── conftest.py              # Pytest fixtures and configuration
├── test_hello_world.py      # Core functionality tests
├── test_cli.py              # CLI interface tests
├── test_utils.py            # Utility function tests
└── test_integration.py      # Integration tests
```

### Test Categories

The tests are organized using pytest markers:

- **`unit`**: Fast, isolated unit tests
- **`integration`**: Tests that verify component interactions
- **`smoke`**: Basic functionality tests (subset of unit tests)
- **`slow`**: Tests that take longer to execute
- **`cli`**: Command-line interface tests
- **`utils`**: Utility function tests
- **`greeting`**: Greeting generation tests
- **`stats`**: Statistics tracking tests
- **`config`**: Configuration management tests

### Running Specific Test Categories

```bash
# Run only unit tests
./test.sh --unit

# Run only integration tests
./test.sh --integration

# Run smoke tests (quick validation)
./test.sh --smoke

# Run CLI tests
./test.sh --cli

# Run quick tests (smoke + unit)
./test.sh --quick

# Run with custom markers
./test.sh -m "not slow"
./test.sh -m "unit and not cli"
```

### Test Features

#### Fixtures

The `conftest.py` provides comprehensive fixtures:

- **`hello_generator`**: HelloWorldGenerator instance
- **`greeting_stats`**: GreetingStats instance
- **`sample_names`**: Parametrized fixture with test names
- **`sample_styles`**: All greeting styles for testing
- **`mock_console`**: Mocked Rich console
- **`temp_config_dir`**: Temporary configuration directory
- **`config_file`**: Pre-configured test configuration file
- **`performance_timer`**: Timer for performance testing
- **`cli_runner`**: Click CLI test runner

#### Parametrized Tests

Many tests use pytest parametrization to test multiple scenarios:

```python
@pytest.mark.parametrize("style", list(GreetingStyle))
def test_generate_greeting_all_styles(self, hello_generator, style):
    # Test all greeting styles automatically
```

#### Mock Integration

Tests include proper mocking for external dependencies:

```python
@pytest.fixture
def mock_random():
    with patch('random.choice') as mock_choice:
        mock_choice.return_value = "blue"
        yield mock_choice
```

#### Coverage Requirements

- Minimum coverage: 80%
- Branch coverage enabled
- Reports generated in multiple formats (terminal, HTML, XML)

### Performance Testing

The suite includes performance tests marked as `slow`:

```bash
# Skip performance tests for faster feedback
./test.sh --fast

# Run only performance tests
./test.sh -m slow
```

### Test Configuration

Key testing configuration in `pytest.ini`:

```ini
[tool:pytest]
testpaths = tests
addopts = 
    --strict-markers
    --cov=src/{{ project_name }}
    --cov-report=term-missing
    --cov-report=html
    --cov-fail-under=80
    --cov-branch

markers =
    slow: marks tests as slow
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    smoke: marks tests as smoke tests
```

### Code Quality

```bash
# Run all linting
./lint.sh

# Format code
uv run ruff format .

# Check types
uv run mypy src

# Security scan
uv run bandit -r src
```

## 🐳 Docker

### Building

```bash
docker build -t {{ project_name }} .
```

### Running

```bash
docker run {{ project_name }} --help
```

### Development with Docker

```bash
docker-compose up -d
```

## 📋 Project Structure

```
{{ project_name }}/
├── src/{{ project_name }}/          # Source code
│   ├── __init__.py                  # Package initialization
│   ├── cli.py                       # CLI interface
│   └── core.py                      # Core business logic
├── tests/                           # Test suite
│   ├── conftest.py                  # Pytest configuration
│   └── unit/                        # Unit tests
├── .github/workflows/               # GitHub Actions
├── .devcontainer/                   # Dev container config
├── pyproject.toml                   # Project configuration
├── ruff.toml                        # Ruff configuration
├── pytest.ini                       # Pytest configuration
├── mypy.ini                         # MyPy configuration
├── .coveragerc                      # Coverage configuration
├── .pre-commit-config.yaml          # Pre-commit hooks
├── Dockerfile                       # Docker configuration
├── docker-compose.yml               # Docker Compose
├── Makefile                         # Development commands
└── README.md                        # This file
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Run tests and linting (`make test lint`)
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

### Commit Convention

This project uses [Conventional Commits](https://www.conventionalcommits.org/):

- `feat:` new features
- `fix:` bug fixes
- `docs:` documentation changes
- `style:` formatting changes
- `refactor:` code refactoring
- `test:` adding tests
- `chore:` maintenance tasks

## 📝 License

This project is licensed under the {{ license }} License - see the [LICENSE](LICENSE) file for details.

## 👤 Author

**{{ author_name }}**
- Email: {{ author_email }}
- GitHub: [@{{ author_name.lower().replace(' ', '') }}](https://github.com/{{ author_name.lower().replace(' ', '') }})

## 🙏 Acknowledgments

- [Click](https://click.palletsprojects.com/) for the CLI framework
- [Rich](https://rich.readthedocs.io/) for beautiful terminal output
- [uv](https://docs.astral.sh/uv/) for fast Python package management
- [Ruff](https://docs.astral.sh/ruff/) for lightning-fast linting and formatting