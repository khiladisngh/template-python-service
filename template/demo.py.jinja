#!/usr/bin/env python3
"""
Demo script for {{ project_name }}

This script demonstrates the colorful Hello World application features:
- Different greeting styles
- Color palette display
- Statistics tracking
- Configuration management
- Command-line interface
"""

import sys
import time
from pathlib import Path

# Add src to path for running from project root
sys.path.insert(0, str(Path(__file__).parent / "src"))

from {{ project_name }}.hello_world import HelloWorldGenerator, GreetingStyle, GreetingStats
from {{ project_name }}.utils import ColorUtils, format_stats_table
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich import box


def demo_greeting_styles():
    """Demonstrate all greeting styles."""
    console = Console()
    generator = HelloWorldGenerator()
    
    console.print(Panel.fit(
        "[bold blue]üé® Greeting Styles Demo[/bold blue]",
        border_style="blue"
    ))
    console.print()
    
    names = ["World", "Developer", "{{ project_name.title().replace('_', ' ') }}"]
    
    for style in GreetingStyle:
        console.print(f"[bold yellow]Style: {style.value.title()}[/bold yellow]")
        for name in names:
            greeting = generator.generate_greeting(name, style)
            console.print(f"  {greeting}")
        console.print()


def demo_colors():
    """Demonstrate color utilities."""
    console = Console()
    
    console.print(Panel.fit(
        "[bold green]üåà Color Utilities Demo[/bold green]",
        border_style="green"
    ))
    console.print()
    
    # Show available colors
    console.print("[bold]Available Colors:[/bold]")
    color_text = Text()
    for i, color in enumerate(ColorUtils.COLORS):
        if i > 0 and i % 6 == 0:
            color_text.append("\n")
        color_text.append(f"{color} ", style=f"bold {color}")
    console.print(color_text)
    console.print()
    
    # Show random color palette
    console.print("[bold]Random Color Palette:[/bold]")
    palette = ColorUtils.get_color_palette(8)
    for color in palette:
        console.print(f"[{color}]‚óè‚óè‚óè[/{color}] {color}")
    console.print()


def demo_stats_tracking():
    """Demonstrate statistics tracking."""
    console = Console()
    generator = HelloWorldGenerator()
    stats = GreetingStats()
    
    console.print(Panel.fit(
        "[bold magenta]üìä Statistics Tracking Demo[/bold magenta]",
        border_style="magenta"
    ))
    console.print()
    
    # Generate some greetings and track stats
    test_data = [
        ("Alice", GreetingStyle.SIMPLE),
        ("Bob", GreetingStyle.FANCY),
        ("Charlie", GreetingStyle.RAINBOW),
        ("Alice", GreetingStyle.SIMPLE),  # Duplicate
        ("Bob", GreetingStyle.BOX),
        ("Diana", GreetingStyle.FANCY),
        ("Alice", GreetingStyle.RAINBOW),
    ]
    
    console.print("[bold]Generating greetings...[/bold]")
    for name, style in test_data:
        greeting = generator.generate_greeting(name, style)
        stats.record_greeting(name, style)
        console.print(f"Generated: [dim]{style.value}[/dim] greeting for [bold]{name}[/bold]")
    
    console.print()
    
    # Show statistics
    final_stats = stats.get_stats()
    stats_table = format_stats_table(final_stats)
    console.print(stats_table)
    
    console.print()
    console.print(f"[bold]Most Popular:[/bold] {stats.get_most_popular_greeting()}")


def demo_performance():
    """Demonstrate performance with many greetings."""
    console = Console()
    generator = HelloWorldGenerator()
    
    console.print(Panel.fit(
        "[bold red]‚ö° Performance Demo[/bold red]",
        border_style="red"
    ))
    console.print()
    
    console.print("[bold]Generating 100 greetings...[/bold]")
    
    start_time = time.time()
    count = 0
    
    for i in range(25):
        for style in GreetingStyle:
            name = f"User{i}"
            greeting = generator.generate_greeting(name, style)
            count += 1
    
    end_time = time.time()
    duration = end_time - start_time
    
    console.print(f"[green]‚úì[/green] Generated {count} greetings in {duration:.3f} seconds")
    console.print(f"[dim]Average: {duration/count*1000:.2f}ms per greeting[/dim]")
    console.print()


def demo_cli_integration():
    """Demonstrate CLI integration."""
    console = Console()
    
    console.print(Panel.fit(
        "[bold cyan]üñ•Ô∏è CLI Integration Demo[/bold cyan]",
        border_style="cyan"
    ))
    console.print()
    
    console.print("[bold]Sample CLI Commands:[/bold]")
    
    commands = [
        "{{ cli_name }} hello",
        "{{ cli_name }} hello --name Alice --style fancy",
        "{{ cli_name }} hello --name Bob --times 3 --animate",
        "{{ cli_name }} colors --count 5",
        "{{ cli_name }} info",
        "{{ cli_name }} --verbose hello --style rainbow",
    ]
    
    for cmd in commands:
        console.print(f"  [dim]$[/dim] [bold blue]{cmd}[/bold blue]")
    
    console.print()
    console.print("[dim]Run these commands after installing the package![/dim]")


def demo_application_info():
    """Show application information."""
    console = Console()
    
    info_table = Table(title="üì¶ {{ project_name.title().replace('_', ' ') }} Demo", box=box.ROUNDED)
    info_table.add_column("Feature", style="bold cyan")
    info_table.add_column("Description", style="green")
    
    features = [
        ("Colorful Greetings", "4 different greeting styles with rich formatting"),
        ("Color Utilities", f"{len(ColorUtils.COLORS)} predefined colors with utilities"),
        ("Statistics Tracking", "Track and analyze greeting generation patterns"),
        ("CLI Interface", "Full-featured command-line interface"),
        ("Performance", "Efficient generation of thousands of greetings"),
        ("Testing", "Comprehensive test suite with 80%+ coverage"),
        ("Type Safety", "Full type hints and mypy checking"),
        ("Code Quality", "Automated formatting and linting"),
    ]
    
    for feature, description in features:
        info_table.add_row(feature, description)
    
    console.print(info_table)
    console.print()


def main():
    """Run the complete demo."""
    console = Console()
    
    # Header
    console.print()
    header_text = Text("{{ project_name.title().replace('_', ' ') }} Demo", style="bold white on blue")
    console.print(Panel.fit(header_text, border_style="blue"))
    console.print()
    
    console.print("[dim]{{ project_description }}[/dim]")
    console.print()
    
    # Run demos
    demo_application_info()
    console.input("[dim]Press Enter to continue...[/dim]")
    
    demo_greeting_styles()
    console.input("[dim]Press Enter to continue...[/dim]")
    
    demo_colors()
    console.input("[dim]Press Enter to continue...[/dim]")
    
    demo_stats_tracking()
    console.input("[dim]Press Enter to continue...[/dim]")
    
    demo_performance()
    console.input("[dim]Press Enter to continue...[/dim]")
    
    demo_cli_integration()
    
    # Footer
    console.print()
    console.print(Panel.fit(
        "[bold green]‚ú® Demo Complete![/bold green]\n\n"
        "Try the CLI commands shown above, or run the test suite:\n"
        "[bold blue]./test.sh[/bold blue] or [bold blue]make test[/bold blue]",
        title="üéâ Thanks for trying {{ project_name }}!",
        border_style="green"
    ))


if __name__ == "__main__":
    main()
